name: Build with PyInstaller

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Executable with PyInstaller
        run: |
          pyinstaller --name "DanMuScreen" --onefile --icon=icons.ico src/main.py --noconsole --add-data="icons.ico:."

      - name: Upload Windows Executable
        uses: actions/upload-artifact@v3
        with:
          name: DanMuScreen-Windows
          path: dist/DanMuScreen.exe
    
  # Job for building on macOS
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pip install Pillow  # Install Pillow for icon conversion

      - name: Build Executable with PyInstaller
        run: |
          pyinstaller --name "DanMuScreen" --onefile --icon=icons.ico src/main.py --noconsole --add-data="icons.ico:."

      - name: Upload macOS Executable
        uses: actions/upload-artifact@v3
        with:
          name: DanMuScreen-macOS
          path: dist/DanMuScreen

  # Job for building on Linux
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Executable with PyInstaller
        run: |
          pyinstaller --name "DanMuScreen" --onefile --icon=icons.ico src/main.py --noconsole --add-data="icons.ico:."

      - name: Upload Linux Executable
        uses: actions/upload-artifact@v3
        with:
          name: DanMuScreen-Linux
          path: dist/DanMuScreen

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]  # Wait for all build jobs to complete
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use GitHub-provided token for public repos, or your own PAT for private
        with:
          tag_name: v1.0.0  # Specify the tag for the release
          release_name: "Version 1.0.0"  # Specify the release name
          draft: false  # Set to true to create as a draft, or false for a published release
          prerelease: false  # Set to true for a prerelease
          body: |
            ### Changes
            - Initial release with Windows, macOS, and Linux executables.

      - name: Upload Windows Executable to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/DanMuScreen.exe
          asset_name: DanMuScreen-Windows.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS Executable to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/DanMuScreen
          asset_name: DanMuScreen-macOS
          asset_content_type: application/octet-stream

      - name: Upload Linux Executable to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/DanMuScreen
          asset_name: DanMuScreen-Linux
          asset_content_type: application/octet-stream
